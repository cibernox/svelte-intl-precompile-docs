{
  "common.or": "や",
  "common.and": "と",
  "main.title": "Svelte Intl Precompile",
  "main.subtitle": "ビルド時に翻訳文を解析してコンパイルする Svelte 向けの i18n ライブラリ",
  "playground.title": "Playground",

  "introduction.title": "イントロダクション",
  "introduction.subsection.why-use-it": "なぜ使用したいのですか？",
  "introduction.paragraph.why-use-it-1": "Svelte-intl-precompile は Svelte アプリのための i18n ライブラリで、アプリが必要とする機能を、アプリのサイズと実行パフォーマンスのどちらに対しても最低限のコストで提供することを目的しています。",
  "introduction.paragraph.why-use-it-2": "これを実現するのに、他の多くの国際化ライブラリとは異なるアプローチをとっています。Svelte.js がコードを解析・解釈してビルド時に最小かつ効率的な javascript にコンパイルするのと同じように、このライブラリは <a href='https://lokalise.com/blog/complete-guide-to-icu-message-format' class='text-primary underline'>ICU メッセージ構文</a> で定義された翻訳文を検査し、小さくて効率的なインライン関数にコンパイルします。",
  "introduction.paragraph.why-use-it-3": "ICU メッセージ構文でサポートされている全ての機能を使用した場合、minify と 圧縮を行ったあとで約2kbとなります。もしいくつかの機能しか使わないのであれば、1kb程度まで小さくすることができます。",
  "introduction.paragraph.why-use-it-4": "また、翻訳文をブラウザ上でパースしたりトーカナイズしたりする必要がないため、高速です。翻訳文のレンダリングは、初回の場合は約4倍高速で、2回目以降は約50%高速です。",
  "introduction.subsection.playground": "なんだって？コードを見せてください",
  "introduction.paragraph.playground-preface": "こちらです、試してみてください。ご自身で翻訳文を貼り付けて、変換された出力を見てみましょう。",
  "introduction.subsection.features": "どんな機能がありますか？",
  "introduction.paragraph.features-1": "ICU メッセージ構文でサポートされているすべての機能をサポートしています。<br>Svelte.js 向けの国際化ライブラリで、非常にポピュラーでとても上手く設計されている",
  "introduction.paragraph.features-2": "とほぼ完全に互換性のある API があります。",
  "introduction.paragraph.features-3": "主要な機能は以下の通りです:",
  "introduction.list-items.features-1": "補間、副翻訳選択、すべての ICU の機能を備えた翻訳。",
  "introduction.list-items.features-2": "日付、時刻、数字、序数、通貨のフォーマッターはモダンなブラウザと node で利用可能なネイティブの Intl API を活用。",
  "introduction.list-items.features-3": "store を使用し、ロケールや翻訳が変更されたときに自動的に更新される、とても使いやすい Svelte 指向の API。",
  "introduction.list-items.features-4": "必要に応じて非同期でロケールをロードする、SSR モードのときにリクエストヘッダからデフォルトのロケールを抽出する、などが行える様々な関数。",
  "introduction.list-items.features-5": "使用していない機能はすべて tree-shaking される。",

  "icu-crash-course.title": "ICU構文 短期集中講座",
  "icu-crash-course.table-heads.definition": "入力",
  "icu-crash-course.table-heads.values": "値",
  "icu-crash-course.table-heads.output": "出力",
  "icu-crash-course.paragraph.main-1": "このライブラリは、ICUメッセージ構文で書かれた翻訳文を解析し、コンパイルします。ICUメッセージ構文は別の独立したプロジェクトですが、この講座ではその良さと主要な機能の使い方について理解を深めていきます。",
  "icu-crash-course.subsection.why": "なぜICUメッセージ構文を使うのか？",
  "icu-crash-course.paragraph.why-1": "ICUは <em class='italic'>International Components for Unicode</em> の略です。C/C++やJavaで人気が出始めて、javascriptのエコシステムでは国際化(internationalization)のデファクトスタンダードとなり、PythonやPHPでも人気があります。",
  "icu-crash-course.paragraph.why-2": "アプリの国際化は、翻訳された文字列を何らかのキーで辞書にマッピングするだけではありません。適切に国際化されたアプリでは、日付や時刻のフォーマット、小数や桁が多い数字に使われる区切り文字、通貨、言葉の性別のサポートなど、翻訳のあらゆる側面を処理しなければなりません。",
  "icu-crash-course.paragraph.why-3": "複数形のようなシンプルなものでさえ、言語によっては非常に複雑になります。英語、ドイツ語、スペイン語には単数形と複数形がありますが、スラヴ諸言語には3種類、アラビア語などの他の言語にはそのアイテムの数によっては6種類にもなります。ある複数形からその次の形に変えなければならない閾値は、地域によって変わることもあります。<br> 英語には性別のある単語はあまり多くありませんが、フランス語や至語にはそれがあり、形容詞は名詞の性別に合わせなければなりません。<code class='inline'>123456789</code> をアメリカ英語方式にフォーマットすると <code class='inline'>123,456,789</code> となりますが、インド方式にすると <code class='inline'>12,34,56,789</code> となります。<br> 通貨の$記号をフォーマットすると金額の前に、€の場合は後になります。",
  "icu-crash-course.paragraph.why-4": "ICU構文はこのような複雑さを開発者から取り除き、本物のプロフェッショナルな翻訳者が自身で全ての細かい問題を処理するのに十分な表現力を持つメタ言語を提供します。",
  "icu-crash-course.subsection.interpolations": "補間",
  "icu-crash-course.paragraph.interpolations-1": "ICUメッセージは値の補間をサポートしており、<code class='inline'>undefined</code> を渡しても <em class='italic'>\"undefined\"</em> として補間されないように適切にサニタイズされます。",
  "icu-crash-course.table-cells.interpolations": "Your favorite color is {chosen}",
  "icu-crash-course.subsection.plurals": "複数形",
  "icu-crash-course.paragraph.plurals-1": "どのアプリでも、2番めによく使われる機能は複数形です。ICU構文には専用の<code class='inline'>複数形</code>ヘルパーがあり、複数形の翻訳についてシンプルなものから非常に複雑なものまで、その翻訳文の中で定義することができます。",
  "icu-crash-course.paragraph.plurals-2": "複数形の各パスには、先頭に数値の修飾子が付きます。付けられる修飾子は以下の通りです:",
  "icu-crash-course.paragraph.plurals-3": "最初に例をいくつか見てみましょう:",
  "icu-crash-course.paragraph.plurals-4": "英語などの言語は <code class='inline'>one</code> と <code class='inline'>other</code> のみを使用しますが、他の言語では最適な複数形を使用することができます。<code class='inline'>few</code> と <code class='inline'>many</code> の使用を分ける特定の閾値は、非常に文化的なものです。",
  "icu-crash-course.paragraph.plurals-5": "また、<code class='inline'>=N</code> を使用して正確な値の翻訳を明示することができます。この方法で数字を指定すると、その言語のデフォルトの動作に優先します。<br> 例えば、英語では一般的な複数形を使用する代わりに <code class='inline'>=2</code> や <code class='inline'>=12</code> を使用して、明示的に a couple(1組) や a dozen(1ダース) のような異なる翻訳を指定することができます。",
  "icu-crash-course.paragraph.plurals-6": "最後に、複数形はハッシュタグを使って複数形に使用されている値を数値として出力することもできます。オプションとして、ヘルパーはハッシュタグで値に減算されるオフセット受け取ることができます。",
  "icu-crash-course.list-items.one": "(singular 単数形)",
  "icu-crash-course.list-items.two": "(dual 正確に2つを示す)",
  "icu-crash-course.list-items.few": "(paucal 不正確だが少数を示す)",
  "icu-crash-course.list-items.many": "(分数にも使用される)",
  "icu-crash-course.list-items.other": "(一般的な複数形の形式。複数形が1種類しかない言語で使用されます)",
  "icu-crash-course.table-cells.plurals-simple": "Your have {numCats, plural, one {one cat} other {# cats}}",
  "icu-crash-course.table-cells.plurals-complex": "Your have {numCats, plural, =0 {no cats at all} one {one single cat} =2 {a couple cats} =3 {a trio of cats} =12 {a dozen cats} other {exactly # cats}}",
  "icu-crash-course.table-cells.plurals-offset": "{guestCount, plural, offset:1 =0 {Mary does not give a party.} =1 {Mary invites {guest} to her party.} =2 {Mary invites {guest} and one other person to her party.} other {Mary invites {guest} and # other people to her party.}}",
  "icu-crash-course.subsection.select": "選択",
  "icu-crash-course.paragraph.select-1": "<code class='inline'>選択</code> ヘルパーは引数に基づいて複数の候補の中から翻訳文を選択するために使用されます。<br> 色々な使い方がありますが、最も一般的なのは性別に関する翻訳に用いることです。",
  "icu-crash-course.table-cells.select": "Your {childGender, select, male {son} female {daughter} other {child}} has won an award",
  "icu-crash-course.table-cells.select-value-male": "Male",
  "icu-crash-course.table-cells.select-value-female": "Female",
  "icu-crash-course.table-cells.select-value-unknown": "Unknown",
  "icu-crash-course.subsection.date": "日付",
  "icu-crash-course.paragraph.date-1": "このヘルパーは、日付を、現在のロケールに合わせたデフォルトのフォーマットか、またはアプリの設定で追加したカスタムフォーマットにフォーマットします。<br> デフォルトのフォーマットは以下の通りです:",
  "icu-crash-course.list-items.short": ": 最もコンパクトな日付形式",
  "icu-crash-course.list-items.medium": ": 簡略化されたテキスト形式",
  "icu-crash-course.list-items.long": ": 長いテキスト形式",
  "icu-crash-course.list-items.full": ": 最も詳細で完全な日付",
  "icu-crash-course.table-cells.date": "Your next holidays start on {holidayStart, date, full}",
  "icu-crash-course.subsection.time": "時間",
  "icu-crash-course.paragraph.time": "日付ヘルパーとほとんど同じですが、これは日付の時間部分のみをフォーマットするためのものです。",
  "icu-crash-course.table-cells.time": "Your doctor's appointment is today at {appointment, time, short}",
  "icu-crash-course.subsection.number": "数値",
  "icu-crash-course.paragraph.number": "現在のロケールのルールに従って数字をフォーマットします。",
  "icu-crash-course.table-cells.number": "Your account balance is {num, number}",
  "icu-crash-course.table-cells.skeletonCurrency": "Your account balance is {num, number, ::currency/EUR}",
  "icu-crash-course.table-cells.skeletonCurrencySigned": "Your account balance is {num, number, ::currency/EUR sign-always}",
  "icu-crash-course.table-cells.skeletonPercentage": "Game progress {num, number, ::percent}",
  "icu-crash-course.table-cells.skeletonPercentageTwoDecimals": "Game progress {num, number, ::percent .00}",
  "icu-crash-course.table-cells.skeletonPercentageScaled": "Game progress {num, number, ::percent .00 scale/100}",
  "icu-crash-course.table-cells.skeletonMeasurementMeter": "Your destination is {num, number, ::unit/meter} away",
  "icu-crash-course.table-cells.skeletonMeasurementMeterLong": "Your destination is {num, number, ::unit/meter unit-width-full-name} away",
  "icu-crash-course.table-cells.skeletonCompactShort": "Are you sure you want to bid {num, number, ::K} over asking?",
  "icu-crash-course.table-cells.skeletonCompactLong": "Are you sure you want to bid {num, number, ::KK} over asking?",
  "icu-crash-course.table-cells.skeletonScientific": 	"The chances of winning the lottery are 1 in {num, number, ::scientific/*ee}",  

  "getting-started.title": "はじめる",
  "getting-started.subsection.installation": "インストール",
  "getting-started.paragraph.installation-1": "Svelte Kit アプリに依存パッケージとして svelte-intl-precompile をインストールします。",
  "getting-started.subsection.create-translations": "翻訳を作成する",
  "getting-started.paragraph.create-translations-1": "次に、翻訳ファイルを格納するフォルダを作成します。 {dir1} {or} {dir2} といった名前のフォルダをプロジェクトルートに置くと良いでしょう",
  "getting-started.paragraph.create-translations-2": "もちろん、他のフォルダでもまったく問題ありません。",
  "getting-started.paragraph.create-translations-3": "JSON形式のファイルを推奨しますが、デフォルトエクスポートを持つJavaScriptファイルを使うこともできます。ファイル形式がどちらの場合でも、それらに含まれる翻訳はICUメッセージ文法の通常の文字列となります。",
  "getting-started.paragraph.create-translations-4": "作者は上記のようなフラットな辞書構造が好みですが、複数の階層を含む辞書構造を使って翻訳ファイルを定義しても構いません:",
  "getting-started.paragraph.create-translations-5": "JSON は制約が多すぎる!もっと柔軟性がほしい!",
  "getting-started.paragraph.create-translations-6": "json ファイルでは JSON 5 の機能を使用することもできます。つまり、コメント、複数行の文字列、シングルクォート、末尾のカンマ... <br>すぐにお使いいただけます。",
  "getting-started.paragraph.create-translations-7": "中括弧が好きじゃない",
  "getting-started.paragraph.create-translations-8": "気持ちはわかります。もし大量の空白がお好みでしたら、YAML ファイルを使うこともできます。.yaml や .yml という拡張子を使用すればよいのです。そのようなことをしたいのであれば。",
  "getting-started.paragraph.create-translations-9": "もっと多くの機能が欲しい",
  "getting-started.paragraph.create-translations-10": ".js ファイル、.ts ファイル、.mjs ファイルに翻訳文を定義することもできます。翻訳文を含むオブジェクトを default export でエクスポートする必要があります。",
  "getting-started.subsection.hook-into-sveltekit": "コンパイラを SvelteKit にフックする",
  "getting-started.paragraph.hook-into-sveltekit-1": "このライブラリのコンパイラはビルド時に動作するため、開発中のアプリのビルドパイプラインにフックする必要があります。<code class=\"bg-code px-2\">{path}</code>の vite プラグインのリストに追加してください:",
  "getting-started.paragraph.hook-into-sveltekit-2": "準備は完了です。ライブラリを使ってみましょう。",
  "getting-started.subsection.hook-into-vite": "Vite.js プロジェクトにコンパイラをフックする",
  "getting-started.paragraph.hook-into-vite-1": "SvelteKit を使わずに Vite.js を直接使用している場合も、設定はほとんど同様です。 SvelteKit が舞台裏では Vite.js を使用してるためです。コンパイラをインポートして、<code class=\"bg-code px-2\">{path}</code>のプラグインのリストに渡してください:",

  "configuration.title": "設定",
  "configuration.subsection.example": "設定例",
  "configuration.link.example": "設定例",
  "configuration.paragraph.example-1": "ライブラリを初期化する最小構成の設定例は次のようになります。",
  "configuration.paragraph.example-2": "に次のように書いてください:",
  "configuration.paragraph.example-3": "これだけでも使いはじめることはできますが、もう少し深堀りしてみましょう。",
  "configuration.subsection.static-locales": "ロケールの静的ロード",
  "configuration.paragraph.static-locales-1": "前記の例で見たように、ロケールを追加する最も簡単な方法は、それらを単にモジュールとしてインポートし、次の関数を使って登録することです:",
  "configuration.paragraph.static-locales-2": "翻訳をJSONファイルとして定義したにも関わらず、ここではそれらを JavaScript のモジュールとしてインポートしていることに注意してください:",
  "configuration.paragraph.static-locales-3": "これは、ビルド時にコンパイラが翻訳をインライン関数を含むモジュールとしてコンパイルしているためです。",
  "configuration.paragraph.static-locales-4": "この方法では、もし一つの言語しか表示されない場合でも、すべての言語がロードされます。新しいプロジェクトを始めるときやごく少数の翻訳しか必要ない場合には大抵はこれで十分ですが、アプリケーションの規模が大きくなれば、必要に応じて翻訳を読み込むことを検討すべきでしょう。",
  "configuration.subsection.dynamic-locales": "ロケールの動的ロード",
  "configuration.paragraph.dynamic-locales-1": "かなりの量の翻訳キーやたくさんのロケールがある場合、実際には表示しないすべての言語をあらゆるユーザにロードさせることは大変な無駄といえます。このライブラリでは",
  "configuration.paragraph.dynamic-locales-2": "関数を使ってユーザが選択した言語を動的にロードすることができ、",
  "configuration.paragraph.dynamic-locales-3": "関数でそれらのロケールがロードされるまで待つことができます。",
  "configuration.paragraph.dynamic-locales-4": "すべてのロケールが動的にロードされるのであれば、デフォルトのロケールがロードされるまではレンダリングを待たせたいはずです。この関数を Svelte の",
  "configuration.paragraph.dynamic-locales-5": "関数の中で呼び出すことにより、まさにそれが実現できます。",
  "configuration.subsection.dynamic-locales-shorthand": "ロケールの動的ロード（ただし、今回は短く）",
  "configuration.paragraph.dynamic-locales-shorthand-1": "もし単にすべてのロケール（その言語に対しての翻訳を含むJSONファイルがあるすべてのロケール）を登録したいのであれば、便利な省略記法があります。",
  "configuration.paragraph.dynamic-locales-shorthand-2": "フォルダはさらに踏み込んだ機能を持つモジュールとなっていて、2つのユーリティティ関数を提供します:",
  "configuration.paragraph.dynamic-locales-shorthand-3": "1つ目は、すべてのロケールに対して",
  "configuration.paragraph.dynamic-locales-shorthand-4": "を呼び出すのと同様の働きをします。<br> 2つ目は、利用可能な全てのロケールを含む配列（登録済みかどうかに関わらず）で、必要に応じて様々な目的に使うことができます。",
  "configuration.subsection.init": "デフォルトロケールとフォールバックロケール",
  "configuration.paragraph.init-1": "関数",
  "configuration.paragraph.init-2": "の呼び出しにおける最も重要なオプションは",
  "configuration.paragraph.init-3": "です。1つ目はアプリが最初に表示されるときに使うロケールを決定し、もう1つはそのとき選択されているロケールに欠けている翻訳があった場合に参照されます。",
  "configuration.paragraph.init-4": "最適なユーザ体験を実現する方法は、ログインユーザに対しては",
  "configuration.paragraph.init-5": "をユーザの言語設定に合わせたり、再訪問ユーザの場合であればクッキーから言語設定を読み出すようにしたり、またはSSRの時点でHTTPリクエスト中の <code class=\"bg-code px-2\">Accept-Language</code> ヘッダを元に選択したりなど、様々な方法が考えられますが、最も単純明快な方法は、ユーティリティ関数を使ってブラウザやURLから検出することです。",
  "configuration.subsection.find-locale": "最適なロケールを見つける",
  "configuration.paragraph.find-locale-1": "",
  "configuration.paragraph.find-locale-2": "関数に渡すべき最適なロケールを選択する有効な方法は様々あります。このライブラリは特に一般的な方法を実装したヘルパー関数を提供しています。",
  "configuration.definitions.navigator": "ブラウザのロケール設定を取得します。結果的に、オペレーティングシステムのロケール設定を取得することになります。",
  "configuration.definitions.query": "URLのクエリ文字列のキーを指定して、ロケールを取得します。<br>例えば、 <pre class=\"inline\">/users?sort=name&amp;dir=asc&amp;lang=es</pre> なら <pre class=\"inline\">getLocaleFromQueryString(&quot;lang&quot;)</pre> を指定します。",
  "configuration.definitions.hash": "<pre class=\"inline\">getLocaleFromQueryString</pre> と同様のことを、URLハッシュフラグメントに対して行います。<br>例えば、 <pre class=\"inline\">/users#sort=name&amp;dir=asc&amp;lang=es</pre> なら <pre class=\"inline\">getLocaleFromHash(&quot;lang&quot;)</pre> を指定します。",
  "configuration.definitions.path": "URLのパスからロケールを取得します。<br>例えば、 <pre class=\"inline\">myapp.com/en-US/users</pre> なら、 <pre class=\"inline\">getLocaleFromPathname(/^/((es|en)(-\\w\\w)?)/)</pre> とします。",
  "configuration.definitions.host": "ホスト名からロケールを取得します。<br>例えば、 <pre class=\"inline\">https://pt.myapp.com</pre> なら <pre class=\"inline\">getLocaleFromHostname(/^((es|en)(-\\w\\w)?)\\./)</pre> とします。",
  "configuration.subsection.custom-formats": "カスタム形式",
  "configuration.paragraph.custom-formats-1": "このライブラリは、数値・日付・時間をフォーマットすることもできます。モダンブラウザや Node.js に既に存在する Intl API を活用することで、アプリを肥大化させることなく実現しています。<br/>デフォルトでは以下のフォーマットが使えますが、必要に応じて追加することもできます。",
  "configuration.paragraph.custom-formats-2": "もしカスタムのフォーマットを定義する必要があれば、",
  "configuration.paragraph.custom-formats-3": "オプションを使って初期化時にライブラリに渡せば、前述のデフォルトフォーマットにディープマージされます。フォーマットは、 <code class=\"bg-code px-2\">Intl.DateTimeFormat</code> のオプションとして有効な値でなくてはなりません。詳細:",

  "usage.title": "使い方",
  "usage.paragraph.preface-1": "このライブラリのAPIは多くの部分を先行する",
  "usage.paragraph.preface-2": "を参考にしており、ユーティリティ関数のインポート先を変えるだけで、アプリケーションのコードに触れることなく svelte-i18 と svelte-intl-precompile とを切り替えられるほどになっています。",
  "usage.paragraph.preface-3": "ストア指向のAPIはテンプレート内で特に使いやすいことに加え、ユーザが別のロケールを洗濯したり翻訳がロードされたら自動的に更新され、アプリケーション全体がリアクティブになるという追加の利点があります。本項で見る例は、いずれも次のような翻訳を含むアプリケーションに記述することを想定しています。",
  "usage.link.basic-translations": "基本的な翻訳",
  "usage.subsection.basic-translations": "基本的な翻訳: <pre class='inline'>$t(key, ops)</pre> ストア",
  "usage.paragraph.basic-translations-1": "最も頻繁に使うストアです。インポートして、翻訳のキーを渡す関数として使ってください。",
  "usage.subsection.passing-arguments": "引数を渡す",
  "usage.paragraph.passing-arguments-1": "",
  "usage.paragraph.passing-arguments-2": "が受け取る2つ目の引数はオブジェクトです。翻訳の中で使われる引数はすべて",
  "usage.paragraph.passing-arguments-3": "を通じて渡されます。",
  "usage.paragraph.passing-arguments-4": "パラメータが単に挿入されるだけの場合でも、複数形や選択ヘルパーの場合でも、数値・日付・時間としてフォーマットされる場合でも違いはありません。引数は全て同じ方法で渡されます。",
  "usage.subsection.formatting": "日付・時間・数値をフォーマットする",
  "usage.paragraph.formatting-1": "数値・日付・時間を渡して渡して設定に合わせてフォーマットすることもできますが、 JavaScript のコードから直接フォーマットする便利なストアも提供しています。",
  "usage.subsection.other-stores": "その他のストア",
  "usage.paragraph.other-stores-1": "他にも、言及に値する3つのストアがあります:",
  "usage.paragraph.other-stores-2": "現在の言語設定を変更するコンポーネントを作ってみましょう。",
  "usage.paragraph.other-stores-3": "前記のコードは直感的です。単に <code class=\"bg-code px-2\">$locales</code> に含まれる利用可能なロケールのリストを順番に処理して、それぞれに対応するボタンを表示しています。ボタンをクリックすると、 <code class=\"bg-code px-2\">$locale</code> に格納されている現在の言語設定を新しい値に書き換えます。<br/> ページをリロードしなくても、アプリ内の全ての翻訳が更新されます。",
  "usage.definitions.other-stores-1": "現在の言語設定を読み取り・書き込みすることができます（例: <pre class=\"inline\">\"es-ES\"</pre> ）。",
  "usage.definitions.other-stores-2": "利用可能なすべてのロケールを含む配列を返します（例: <pre class=\"inline\">[\"es-ES\", \"en\", \"pt-BR\"]</pre>）。",
  "usage.definitions.other-stores-3": "いずれかのロケールの非同期読み込みがまだ完了していない場合に <pre class=\"inline\">true</pre> を返します。"
}